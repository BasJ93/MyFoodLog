//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace MyFoodLog.ClientApis.Interfaces
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IGrocyClient
    {
        /// <summary>
        /// Returns information about the installed grocy version, PHP runtime and OS
        /// </summary>
        /// <returns>An DbChangedTimeResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> InfoAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns information about the installed grocy version, PHP runtime and OS
        /// </summary>
        /// <returns>An DbChangedTimeResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> InfoAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the time when the database was last changed
        /// </summary>
        /// <returns>An DbChangedTimeResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DbChangedTimeResponse> DbChangedTimeAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the time when the database was last changed
        /// </summary>
        /// <returns>An DbChangedTimeResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DbChangedTimeResponse> DbChangedTimeAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all config settings
        /// </summary>
        /// <returns>Key/value pairs of config settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> ConfigAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all config settings
        /// </summary>
        /// <returns>Key/value pairs of config settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> ConfigAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the current server time
        /// </summary>
        /// <param name="offset">Offset of timestamp in seconds. Can be positive or negative.</param>
        /// <returns>A TimeResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimeResponse> TimeAsync(int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the current server time
        /// </summary>
        /// <param name="offset">Offset of timestamp in seconds. Can be positive or negative.</param>
        /// <returns>A TimeResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimeResponse> TimeAsync(int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all localization strings (in the by the user desired language)
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> LocalizationStringsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all localization strings (in the by the user desired language)
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> LocalizationStringsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Logs a missing localization string
        /// </summary>
        /// <remarks>
        /// Only when MODE == 'dev', so should only be called then
        /// </remarks>
        /// <param name="body">A valid MissingLocalizationRequest object</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LogMissingLocalizationAsync(MissingLocalizationRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Logs a missing localization string
        /// </summary>
        /// <remarks>
        /// Only when MODE == 'dev', so should only be called then
        /// </remarks>
        /// <param name="body">A valid MissingLocalizationRequest object</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LogMissingLocalizationAsync(MissingLocalizationRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all objects of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An entity object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Product>> ObjectsAllAsync(ExposedEntity_NotIncludingNotListable entity, System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all objects of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An entity object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Product>> ObjectsAllAsync(ExposedEntity_NotIncludingNotListable entity, System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds a single object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="body">A valid entity object of the entity specified in parameter *entity*</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> ObjectsPOSTAsync(ExposedEntity_NotIncludingNotEditable entity, Product body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a single object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="body">A valid entity object of the entity specified in parameter *entity*</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> ObjectsPOSTAsync(ExposedEntity_NotIncludingNotEditable entity, Product body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a single object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="objectId">A valid object id of the given entity</param>
        /// <returns>An entity object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Product> ObjectsGETAsync(ExposedEntity_NotIncludingNotListable entity, int objectId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a single object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="objectId">A valid object id of the given entity</param>
        /// <returns>An entity object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Product> ObjectsGETAsync(ExposedEntity_NotIncludingNotListable entity, int objectId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Edits the given object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="objectId">A valid object id of the given entity</param>
        /// <param name="body">A valid entity object of the entity specified in parameter *entity*</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ObjectsPUTAsync(ExposedEntity_NotIncludingNotEditable entity, int objectId, Product body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edits the given object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="objectId">A valid object id of the given entity</param>
        /// <param name="body">A valid entity object of the entity specified in parameter *entity*</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ObjectsPUTAsync(ExposedEntity_NotIncludingNotEditable entity, int objectId, Product body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a single object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="objectId">A valid object id of the given entity</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ObjectsDELETEAsync(ExposedEntity_NotIncludingNotDeletable entity, int objectId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a single object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="objectId">A valid object id of the given entity</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ObjectsDELETEAsync(ExposedEntity_NotIncludingNotDeletable entity, int objectId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all userfields with their values of the given object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="objectId">A valid object id of the given entity</param>
        /// <returns>Key/value pairs of userfields</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserfieldsGETAsync(ExposedEntity_IncludingUserEntities entity, string objectId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all userfields with their values of the given object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="objectId">A valid object id of the given entity</param>
        /// <returns>Key/value pairs of userfields</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserfieldsGETAsync(ExposedEntity_IncludingUserEntities entity, string objectId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Edits the given userfields of the given object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="objectId">A valid object id of the given entity</param>
        /// <param name="body">A valid entity object of the entity specified in parameter *entity*</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserfieldsPUTAsync(ExposedEntity_IncludingUserEntities_NotIncludingNotEditable entity, string objectId, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edits the given userfields of the given object of the given entity
        /// </summary>
        /// <param name="entity">A valid entity name</param>
        /// <param name="objectId">A valid object id of the given entity</param>
        /// <param name="body">A valid entity object of the entity specified in parameter *entity*</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserfieldsPUTAsync(ExposedEntity_IncludingUserEntities_NotIncludingNotEditable entity, string objectId, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Serves the given file
        /// </summary>
        /// <remarks>
        /// With proper Content-Type header
        /// </remarks>
        /// <param name="group">The file group</param>
        /// <param name="fileName">The file name (including extension)&lt;br&gt;**BASE64 encoded**</param>
        /// <param name="force_serve_as">Force the file to be served as the given type</param>
        /// <param name="best_fit_height">Only when using `force_serve_as` = `picture`: Downscale the picture to the given height while maintaining the aspect ratio</param>
        /// <param name="best_fit_width">Only when using `force_serve_as` = `picture`: Downscale the picture to the given width while maintaining the aspect ratio</param>
        /// <returns>The binary file contents (Content-Type header is automatically set based on the file type)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> FilesGETAsync(FileGroups group, string fileName, Force_serve_as? force_serve_as, double? best_fit_height, double? best_fit_width);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Serves the given file
        /// </summary>
        /// <remarks>
        /// With proper Content-Type header
        /// </remarks>
        /// <param name="group">The file group</param>
        /// <param name="fileName">The file name (including extension)&lt;br&gt;**BASE64 encoded**</param>
        /// <param name="force_serve_as">Force the file to be served as the given type</param>
        /// <param name="best_fit_height">Only when using `force_serve_as` = `picture`: Downscale the picture to the given height while maintaining the aspect ratio</param>
        /// <param name="best_fit_width">Only when using `force_serve_as` = `picture`: Downscale the picture to the given width while maintaining the aspect ratio</param>
        /// <returns>The binary file contents (Content-Type header is automatically set based on the file type)</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> FilesGETAsync(FileGroups group, string fileName, Force_serve_as? force_serve_as, double? best_fit_height, double? best_fit_width, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Uploads a single file
        /// </summary>
        /// <remarks>
        /// The file will be stored at /data/storage/{group}/{file_name} (you need to remember the group and file name to get or delete it again)
        /// </remarks>
        /// <param name="group">The file group</param>
        /// <param name="fileName">The file name (including extension)&lt;br&gt;**BASE64 encoded**</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FilesPUTAsync(FileGroups group, string fileName, System.IO.Stream body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Uploads a single file
        /// </summary>
        /// <remarks>
        /// The file will be stored at /data/storage/{group}/{file_name} (you need to remember the group and file name to get or delete it again)
        /// </remarks>
        /// <param name="group">The file group</param>
        /// <param name="fileName">The file name (including extension)&lt;br&gt;**BASE64 encoded**</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FilesPUTAsync(FileGroups group, string fileName, System.IO.Stream body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes the given file
        /// </summary>
        /// <param name="group">The file group</param>
        /// <param name="fileName">The file name (including extension)&lt;br&gt;**BASE64 encoded**</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FilesDELETEAsync(FileGroups group, string fileName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes the given file
        /// </summary>
        /// <param name="group">The file group</param>
        /// <param name="fileName">The file name (including extension)&lt;br&gt;**BASE64 encoded**</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FilesDELETEAsync(FileGroups group, string fileName, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all users
        /// </summary>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>A list of user objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDto>> UsersAllAsync(System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all users
        /// </summary>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>A list of user objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDto>> UsersAllAsync(System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <param name="body">A valid user object</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersPOSTAsync(User body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new user
        /// </summary>
        /// <param name="body">A valid user object</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersPOSTAsync(User body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Edits the given user
        /// </summary>
        /// <param name="userId">A valid user id</param>
        /// <param name="body">A valid user object</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersPUTAsync(int userId, User body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edits the given user
        /// </summary>
        /// <param name="userId">A valid user id</param>
        /// <param name="body">A valid user object</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersPUTAsync(int userId, User body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes the given user
        /// </summary>
        /// <param name="userId">A valid user id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersDELETEAsync(int userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes the given user
        /// </summary>
        /// <param name="userId">A valid user id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersDELETEAsync(int userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the assigned permissions of the given user
        /// </summary>
        /// <param name="userId">A valid user id</param>
        /// <returns>A list of user permission objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> PermissionsAllAsync(int userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the assigned permissions of the given user
        /// </summary>
        /// <param name="userId">A valid user id</param>
        /// <returns>A list of user permission objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> PermissionsAllAsync(int userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds a permission to the given user
        /// </summary>
        /// <param name="userId">A valid user id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PermissionsPOSTAsync(int userId, Body body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds a permission to the given user
        /// </summary>
        /// <param name="userId">A valid user id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PermissionsPOSTAsync(int userId, Body body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Replaces the assigned permissions of the given user
        /// </summary>
        /// <param name="userId">A valid user id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PermissionsPUTAsync(int userId, Body2 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replaces the assigned permissions of the given user
        /// </summary>
        /// <param name="userId">A valid user id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PermissionsPUTAsync(int userId, Body2 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the currently authenticated user
        /// </summary>
        /// <returns>A user object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the currently authenticated user
        /// </summary>
        /// <returns>A user object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UserAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all settings of the currently logged in user
        /// </summary>
        /// <returns>Key/value pairs of user settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SettingsGETAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all settings of the currently logged in user
        /// </summary>
        /// <returns>Key/value pairs of user settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SettingsGETAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the given setting of the currently logged in user
        /// </summary>
        /// <param name="settingKey">The key of the user setting</param>
        /// <returns>A UserSetting object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSetting> SettingsGET2Async(string settingKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the given setting of the currently logged in user
        /// </summary>
        /// <param name="settingKey">The key of the user setting</param>
        /// <returns>A UserSetting object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserSetting> SettingsGET2Async(string settingKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Sets the given setting of the currently logged in user
        /// </summary>
        /// <param name="body">A valid UserSetting object</param>
        /// <param name="settingKey">The key of the user setting</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SettingsPUTAsync(UserSetting body, string settingKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sets the given setting of the currently logged in user
        /// </summary>
        /// <param name="body">A valid UserSetting object</param>
        /// <param name="settingKey">The key of the user setting</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SettingsPUTAsync(UserSetting body, string settingKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes the given setting of the currently logged in user
        /// </summary>
        /// <param name="settingKey">The key of the user setting</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SettingsDELETEAsync(string settingKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes the given setting of the currently logged in user
        /// </summary>
        /// <param name="settingKey">The key of the user setting</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SettingsDELETEAsync(string settingKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all products which are currently in stock incl. the next due date per product
        /// </summary>
        /// <returns>An array of CurrentStockResponse objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrentStockResponse>> StockAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all products which are currently in stock incl. the next due date per product
        /// </summary>
        /// <returns>An array of CurrentStockResponse objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrentStockResponse>> StockAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns details of the given stock
        /// </summary>
        /// <param name="entryId">A valid stock entry id</param>
        /// <returns>A StockEntry Response object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockEntry> EntryAsync(int entryId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns details of the given stock
        /// </summary>
        /// <param name="entryId">A valid stock entry id</param>
        /// <returns>A StockEntry Response object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockEntry> EntryAsync(int entryId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Edits the stock entry
        /// </summary>
        /// <param name="entryId">A valid stock entry id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> EntryAllAsync(int entryId, Body3 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edits the stock entry
        /// </summary>
        /// <param name="entryId">A valid stock entry id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> EntryAllAsync(int entryId, Body3 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Prints the grocycode / stock entry label of the given entry on the configured label printer
        /// </summary>
        /// <param name="entryId">A valid stock entry id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PrintlabelAsync(int entryId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prints the grocycode / stock entry label of the given entry on the configured label printer
        /// </summary>
        /// <param name="entryId">A valid stock entry id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PrintlabelAsync(int entryId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all products which are due soon, overdue, expired or currently missing
        /// </summary>
        /// <param name="due_soon_days">The number of days in which products are considered to be due soon</param>
        /// <returns>A CurrentVolatilStockResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrentVolatilStockResponse>> VolatileAsync(int? due_soon_days);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all products which are due soon, overdue, expired or currently missing
        /// </summary>
        /// <param name="due_soon_days">The number of days in which products are considered to be due soon</param>
        /// <returns>A CurrentVolatilStockResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrentVolatilStockResponse>> VolatileAsync(int? due_soon_days, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns details of the given product
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>A ProductDetailsResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductDetailsResponse> ProductsAsync(int productId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns details of the given product
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>A ProductDetailsResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductDetailsResponse> ProductsAsync(int productId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all locations where the given product currently has stock
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <param name="include_sub_products">If sub product locations should be included (if the given product is a parent product and in addition to the ones of the given product)</param>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of StockLocation objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLocation>> LocationsAsync(int productId, bool? include_sub_products, System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all locations where the given product currently has stock
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <param name="include_sub_products">If sub product locations should be included (if the given product is a parent product and in addition to the ones of the given product)</param>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of StockLocation objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLocation>> LocationsAsync(int productId, bool? include_sub_products, System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all stock entries of the given product in order of next use (Opened first, then first due first, then first in first out)
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <param name="include_sub_products">If sub products should be included (if the given product is a parent product and in addition to the ones of the given product)</param>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of StockEntry objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockEntry>> EntriesAsync(int productId, bool? include_sub_products, System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all stock entries of the given product in order of next use (Opened first, then first due first, then first in first out)
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <param name="include_sub_products">If sub products should be included (if the given product is a parent product and in addition to the ones of the given product)</param>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of StockEntry objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockEntry>> EntriesAsync(int productId, bool? include_sub_products, System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the price history of the given product
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>An array of ProductPriceHistory objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductPriceHistory>> PriceHistoryAsync(int productId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the price history of the given product
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>An array of ProductPriceHistory objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductPriceHistory>> PriceHistoryAsync(int productId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds the given amount of the given product to stock
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> AddAsync(int productId, Body4 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds the given amount of the given product to stock
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> AddAsync(int productId, Body4 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Removes the given amount of the given product from stock
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> ConsumeAllAsync(int productId, Body5 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes the given amount of the given product from stock
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> ConsumeAllAsync(int productId, Body5 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Transfers the given amount of the given product from one location to another (this is currently not supported for tare weight handling enabled products)
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> TransferAsync(int productId, Body6 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfers the given amount of the given product from one location to another (this is currently not supported for tare weight handling enabled products)
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> TransferAsync(int productId, Body6 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Inventories the given product (adds/removes based on the given new amount)
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> InventoryAsync(int productId, Body7 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Inventories the given product (adds/removes based on the given new amount)
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> InventoryAsync(int productId, Body7 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Marks the given amount of the given product as opened
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> OpenAsync(int productId, Body8 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Marks the given amount of the given product as opened
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> OpenAsync(int productId, Body8 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Prints the grocycode label of the given product on the configured label printer
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Printlabel2Async(int productId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prints the grocycode label of the given product on the configured label printer
        /// </summary>
        /// <param name="productId">A valid product id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Printlabel2Async(int productId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Merges two products into one
        /// </summary>
        /// <param name="productIdToKeep">A valid product id of the product to keep</param>
        /// <param name="productIdToRemove">A valid product id of the product to remove</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MergeAsync(int productIdToKeep, int productIdToRemove);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Merges two products into one
        /// </summary>
        /// <param name="productIdToKeep">A valid product id of the product to keep</param>
        /// <param name="productIdToRemove">A valid product id of the product to remove</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MergeAsync(int productIdToKeep, int productIdToRemove, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns details of the given product by its barcode
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>A ProductDetailsResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductDetailsResponse> ByBarcodeAsync(string barcode);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns details of the given product by its barcode
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>A ProductDetailsResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductDetailsResponse> ByBarcodeAsync(string barcode, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds the given amount of the by its barcode given product to stock
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> Add2Async(string barcode, Body9 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds the given amount of the by its barcode given product to stock
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> Add2Async(string barcode, Body9 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Removes the given amount of the by its barcode given product from stock
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> ConsumeAll2Async(string barcode, Body10 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes the given amount of the by its barcode given product from stock
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> ConsumeAll2Async(string barcode, Body10 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Transfers the given amount of the by its barcode given product from one location to another (this is currently not supported for tare weight handling enabled products)
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> Transfer2Async(string barcode, Body11 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transfers the given amount of the by its barcode given product from one location to another (this is currently not supported for tare weight handling enabled products)
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> Transfer2Async(string barcode, Body11 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Inventories the by its barcode given product (adds/removes based on the given new amount)
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> Inventory2Async(string barcode, Body12 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Inventories the by its barcode given product (adds/removes based on the given new amount)
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> Inventory2Async(string barcode, Body12 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Marks the given amount of the by its barcode given product as opened
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> Open2Async(string barcode, Body13 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Marks the given amount of the by its barcode given product as opened
        /// </summary>
        /// <param name="barcode">Barcode</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> Open2Async(string barcode, Body13 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all stock entries of the given location
        /// </summary>
        /// <param name="locationId">A valid location id</param>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of StockEntry objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockEntry>> Entries2Async(int locationId, System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all stock entries of the given location
        /// </summary>
        /// <param name="locationId">A valid location id</param>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of StockEntry objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockEntry>> Entries2Async(int locationId, System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds currently missing products (below defined min. stock amount) to the given shopping list
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddMissingProductsAsync(Body14 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds currently missing products (below defined min. stock amount) to the given shopping list
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddMissingProductsAsync(Body14 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds overdue products to the given shopping list
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddOverdueProductsAsync(Body15 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds overdue products to the given shopping list
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddOverdueProductsAsync(Body15 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds expired products to the given shopping list
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddExpiredProductsAsync(Body16 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds expired products to the given shopping list
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddExpiredProductsAsync(Body16 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Removes all items from the given shopping list
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClearAsync(Body17 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes all items from the given shopping list
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClearAsync(Body17 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds the given amount of the given product to the given shopping list
        /// </summary>
        /// <remarks>
        /// If the product is already on the shopping list, the given amount will increase the amount of the already existing item, otherwise a new item will be added
        /// </remarks>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddProductAsync(Body18 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds the given amount of the given product to the given shopping list
        /// </summary>
        /// <remarks>
        /// If the product is already on the shopping list, the given amount will increase the amount of the already existing item, otherwise a new item will be added
        /// </remarks>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddProductAsync(Body18 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Removes the given amount of the given product from the given shopping list, if it is on it
        /// </summary>
        /// <remarks>
        /// If the resulting amount is &lt;= 0, the item will be completely removed from the given list, otherwise the given amount will reduce the amount of the existing item
        /// </remarks>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveProductAsync(Body19 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes the given amount of the given product from the given shopping list, if it is on it
        /// </summary>
        /// <remarks>
        /// If the resulting amount is &lt;= 0, the item will be completely removed from the given list, otherwise the given amount will reduce the amount of the existing item
        /// </remarks>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveProductAsync(Body19 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the given stock booking
        /// </summary>
        /// <param name="bookingId">A valid stock booking id</param>
        /// <returns>A StockLogEntry object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockLogEntry> BookingsAsync(int bookingId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the given stock booking
        /// </summary>
        /// <param name="bookingId">A valid stock booking id</param>
        /// <returns>A StockLogEntry object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockLogEntry> BookingsAsync(int bookingId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Undoes a booking
        /// </summary>
        /// <param name="bookingId">A valid stock booking id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UndoAsync(int bookingId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Undoes a booking
        /// </summary>
        /// <param name="bookingId">A valid stock booking id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UndoAsync(int bookingId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all stock bookings of the given transaction id
        /// </summary>
        /// <param name="transactionId">A valid stock transaction id</param>
        /// <returns>An array of StockLogEntry objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> TransactionsAsync(string transactionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all stock bookings of the given transaction id
        /// </summary>
        /// <param name="transactionId">A valid stock transaction id</param>
        /// <returns>An array of StockLogEntry objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StockLogEntry>> TransactionsAsync(string transactionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Undoes a transaction
        /// </summary>
        /// <param name="transactionId">A valid stock transaction id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Undo2Async(string transactionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Undoes a transaction
        /// </summary>
        /// <param name="transactionId">A valid stock transaction id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Undo2Async(string transactionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Executes an external barcode lookoup via the configured plugin with the given barcode
        /// </summary>
        /// <param name="barcode">The barcode to lookup up</param>
        /// <param name="add">When true, the product is added to the database on a successful lookup and the new product id is in included in the response</param>
        /// <returns>An ExternalBarcodeLookupResponse object or null, when nothing was found for the given barcode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalBarcodeLookupResponse> ExternalLookupAsync(string barcode, bool? add);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Executes an external barcode lookoup via the configured plugin with the given barcode
        /// </summary>
        /// <param name="barcode">The barcode to lookup up</param>
        /// <param name="add">When true, the product is added to the database on a successful lookup and the new product id is in included in the response</param>
        /// <returns>An ExternalBarcodeLookupResponse object or null, when nothing was found for the given barcode</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExternalBarcodeLookupResponse> ExternalLookupAsync(string barcode, bool? add, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Adds all missing products for the given recipe to the shopping list
        /// </summary>
        /// <param name="recipeId">A valid recipe id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddNotFulfilledProductsToShoppinglistAsync(string recipeId, Body20 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds all missing products for the given recipe to the shopping list
        /// </summary>
        /// <param name="recipeId">A valid recipe id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddNotFulfilledProductsToShoppinglistAsync(string recipeId, Body20 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get stock fulfillment information for the given recipe
        /// </summary>
        /// <param name="recipeId">A valid recipe id</param>
        /// <returns>A RecipeFulfillmentResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RecipeFulfillmentResponse> FulfillmentAsync(string recipeId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get stock fulfillment information for the given recipe
        /// </summary>
        /// <param name="recipeId">A valid recipe id</param>
        /// <returns>A RecipeFulfillmentResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RecipeFulfillmentResponse> FulfillmentAsync(string recipeId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Consumes all products of the given recipe
        /// </summary>
        /// <param name="recipeId">A valid recipe id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConsumeAsync(string recipeId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Consumes all products of the given recipe
        /// </summary>
        /// <param name="recipeId">A valid recipe id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConsumeAsync(string recipeId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get stock fulfillment information for all recipe
        /// </summary>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of RecipeFulfillmentResponse objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RecipeFulfillmentResponse>> FulfillmentAllAsync(System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get stock fulfillment information for all recipe
        /// </summary>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of RecipeFulfillmentResponse objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RecipeFulfillmentResponse>> FulfillmentAllAsync(System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Copies a recipe
        /// </summary>
        /// <param name="recipeId">A valid recipe id of the recipe to copy</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> CopyAsync(int recipeId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Copies a recipe
        /// </summary>
        /// <param name="recipeId">A valid recipe id of the recipe to copy</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> CopyAsync(int recipeId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Prints the grocycode label of the given recipe on the configured label printer
        /// </summary>
        /// <param name="recipeId">A valid recipe id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Printlabel3Async(int recipeId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prints the grocycode label of the given recipe on the configured label printer
        /// </summary>
        /// <param name="recipeId">A valid recipe id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Printlabel3Async(int recipeId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all chores incl. the next estimated execution time per chore
        /// </summary>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of CurrentChoreResponse objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrentChoreResponse>> ChoresAllAsync(System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all chores incl. the next estimated execution time per chore
        /// </summary>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of CurrentChoreResponse objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrentChoreResponse>> ChoresAllAsync(System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns details of the given chore
        /// </summary>
        /// <param name="choreId">A valid chore id</param>
        /// <returns>A ChoreDetailsResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChoreDetailsResponse> ChoresAsync(int choreId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns details of the given chore
        /// </summary>
        /// <param name="choreId">A valid chore id</param>
        /// <returns>A ChoreDetailsResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChoreDetailsResponse> ChoresAsync(int choreId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Tracks an execution of the given chore
        /// </summary>
        /// <param name="choreId">A valid chore id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChoreLogEntry> ExecuteAsync(int choreId, Body21 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Tracks an execution of the given chore
        /// </summary>
        /// <param name="choreId">A valid chore id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChoreLogEntry> ExecuteAsync(int choreId, Body21 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Undoes a chore execution
        /// </summary>
        /// <param name="executionId">A valid chore execution id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Undo3Async(int executionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Undoes a chore execution
        /// </summary>
        /// <param name="executionId">A valid chore execution id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Undo3Async(int executionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// (Re)calculates all next user assignments of all chores
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CalculateNextAssignmentsAsync(Body22 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// (Re)calculates all next user assignments of all chores
        /// </summary>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CalculateNextAssignmentsAsync(Body22 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Prints the grocycode label of the given chore on the configured label printer
        /// </summary>
        /// <param name="choreId">A valid chore id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Printlabel4Async(int choreId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prints the grocycode label of the given chore on the configured label printer
        /// </summary>
        /// <param name="choreId">A valid chore id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Printlabel4Async(int choreId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Merges two chores into one
        /// </summary>
        /// <param name="choreIdToKeep">A valid chore id of the chore to keep</param>
        /// <param name="choreIdToRemove">A valid chore id of the chore to remove</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Merge2Async(int choreIdToKeep, int choreIdToRemove);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Merges two chores into one
        /// </summary>
        /// <param name="choreIdToKeep">A valid chore id of the chore to keep</param>
        /// <param name="choreIdToRemove">A valid chore id of the chore to remove</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Merge2Async(int choreIdToKeep, int choreIdToRemove, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all batteries incl. the next estimated charge time per battery
        /// </summary>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of CurrentBatteryResponse objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrentBatteryResponse>> BatteriesAllAsync(System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all batteries incl. the next estimated charge time per battery
        /// </summary>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of CurrentBatteryResponse objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrentBatteryResponse>> BatteriesAllAsync(System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns details of the given battery
        /// </summary>
        /// <param name="batteryId">A valid battery id</param>
        /// <returns>A BatteryDetailsResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BatteryDetailsResponse> BatteriesAsync(int batteryId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns details of the given battery
        /// </summary>
        /// <param name="batteryId">A valid battery id</param>
        /// <returns>A BatteryDetailsResponse object</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BatteryDetailsResponse> BatteriesAsync(int batteryId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Tracks a charge cycle of the given battery
        /// </summary>
        /// <param name="batteryId">A valid battery id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BatteryChargeCycleEntry> ChargeAsync(int batteryId, Body23 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Tracks a charge cycle of the given battery
        /// </summary>
        /// <param name="batteryId">A valid battery id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BatteryChargeCycleEntry> ChargeAsync(int batteryId, Body23 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Undoes a battery charge cycle
        /// </summary>
        /// <param name="chargeCycleId">A valid charge cycle id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Undo4Async(int chargeCycleId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Undoes a battery charge cycle
        /// </summary>
        /// <param name="chargeCycleId">A valid charge cycle id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Undo4Async(int chargeCycleId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Prints the grocycode label of the given battery on the configured label printer
        /// </summary>
        /// <param name="batteryId">A valid battery id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Printlabel5Async(int batteryId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prints the grocycode label of the given battery on the configured label printer
        /// </summary>
        /// <param name="batteryId">A valid battery id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Printlabel5Async(int batteryId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns all tasks which are not done yet
        /// </summary>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of CurrentTaskResponse objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrentTaskResponse>> TasksAsync(System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all tasks which are not done yet
        /// </summary>
        /// <param name="query">An array of filter conditions, each of them is a string in the form of `&lt;field&gt;&lt;condition&gt;&lt;value&gt;` where&lt;br&gt;`&lt;field&gt;` is a valid field name&lt;br&gt;`&lt;condition&gt;` is a comparison operator, one of&lt;br&gt;&amp;nbsp;&amp;nbsp;`=` equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`!=` not equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`~` LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`!~` not LIKE&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;` less&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;` greater&lt;br&gt;&amp;nbsp;&amp;nbsp;`&lt;=` less or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`&gt;=` greater or equal&lt;br&gt;&amp;nbsp;&amp;nbsp;`ยง` regular expression&lt;br&gt;`&lt;value&gt;` is the value to search for</param>
        /// <param name="order">A valid field name by which the response should be ordered, use the separator `:` to specify the sort order (`asc` or `desc`, defaults to `asc` when omitted)</param>
        /// <param name="limit">The maximum number of objects to return</param>
        /// <param name="offset">The number of objects to skip</param>
        /// <returns>An array of CurrentTaskResponse objects</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrentTaskResponse>> TasksAsync(System.Collections.Generic.IEnumerable<string> query, string order, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Marks the given task as completed
        /// </summary>
        /// <param name="taskId">A valid task id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompleteAsync(int taskId, Body24 body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Marks the given task as completed
        /// </summary>
        /// <param name="taskId">A valid task id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompleteAsync(int taskId, Body24 body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Marks the given task as not completed
        /// </summary>
        /// <param name="taskId">A valid task id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Undo5Async(int taskId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Marks the given task as not completed
        /// </summary>
        /// <param name="taskId">A valid task id</param>
        /// <returns>The operation was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task Undo5Async(int taskId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns the calendar in iCal format
        /// </summary>
        /// <returns>The iCal file contents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> IcalAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the calendar in iCal format
        /// </summary>
        /// <returns>The iCal file contents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> IcalAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a (public) sharing link for the calendar in iCal format
        /// </summary>
        /// <returns>The (public) sharing link for the calendar in iCal format</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> SharingLinkAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a (public) sharing link for the calendar in iCal format
        /// </summary>
        /// <returns>The (public) sharing link for the calendar in iCal format</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> SharingLinkAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Prints the shoppinglist with a thermal printer
        /// </summary>
        /// <param name="list">Shopping list id</param>
        /// <param name="printHeader">Prints grocy logo if true</param>
        /// <returns>Returns OK if the printing was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> ThermalAsync(int? list, bool? printHeader);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prints the shoppinglist with a thermal printer
        /// </summary>
        /// <param name="list">Shopping list id</param>
        /// <param name="printHeader">Prints grocy logo if true</param>
        /// <returns>Returns OK if the printing was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> ThermalAsync(int? list, bool? printHeader, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        [Newtonsoft.Json.JsonProperty("qu_id_purchase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Qu_id_purchase { get; set; }

        [Newtonsoft.Json.JsonProperty("qu_id_stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Qu_id_stock { get; set; }

        [Newtonsoft.Json.JsonProperty("enable_tare_weight_handling", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Enable_tare_weight_handling { get; set; }

        [Newtonsoft.Json.JsonProperty("not_check_stock_fulfillment_for_recipes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Not_check_stock_fulfillment_for_recipes { get; set; }

        [Newtonsoft.Json.JsonProperty("product_group_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product_group_id { get; set; }

        [Newtonsoft.Json.JsonProperty("qu_factor_purchase_to_stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Qu_factor_purchase_to_stock { get; set; }

        [Newtonsoft.Json.JsonProperty("tare_weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Tare_weight { get; set; }

        [Newtonsoft.Json.JsonProperty("min_stock_amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double Min_stock_amount { get; set; } = 0D;

        [Newtonsoft.Json.JsonProperty("default_best_before_days", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Default_best_before_days { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("default_best_before_days_after_open", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Default_best_before_days_after_open { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("picture_file_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Picture_file_name { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("shopping_location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Shopping_location_id { get; set; }

        [Newtonsoft.Json.JsonProperty("treat_opened_as_out_of_stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Treat_opened_as_out_of_stock { get; set; }

        [Newtonsoft.Json.JsonProperty("no_own_stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int No_own_stock { get; set; }

        /// <summary>
        /// Key/value pairs of userfields
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userfields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Userfields { get; set; }

        [Newtonsoft.Json.JsonProperty("should_not_be_frozen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Should_not_be_frozen { get; set; }

        [Newtonsoft.Json.JsonProperty("default_consume_location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Default_consume_location_id { get; set; }

        [Newtonsoft.Json.JsonProperty("move_on_open", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Move_on_open { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuantityUnit
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("name_plural", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name_plural { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("plural_forms", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Plural_forms { get; set; }

        /// <summary>
        /// Key/value pairs of userfields
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userfields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Userfields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Location
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        /// <summary>
        /// Key/value pairs of userfields
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userfields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Userfields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShoppingLocation
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        /// <summary>
        /// Key/value pairs of userfields
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userfields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Userfields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockLocation
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("product_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product_id { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        [Newtonsoft.Json.JsonProperty("location_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location_name { get; set; }

        [Newtonsoft.Json.JsonProperty("location_is_freezer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_is_freezer { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockEntry
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("product_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product_id { get; set; }

        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        [Newtonsoft.Json.JsonProperty("shopping_location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Shopping_location_id { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("best_before_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Best_before_date { get; set; }

        [Newtonsoft.Json.JsonProperty("purchased_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Purchased_date { get; set; }

        /// <summary>
        /// A unique id which references this stock entry during its lifetime
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stock_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stock_id { get; set; }

        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Price { get; set; }

        [Newtonsoft.Json.JsonProperty("open", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Open { get; set; }

        [Newtonsoft.Json.JsonProperty("opened_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Opened_date { get; set; }

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecipeFulfillmentResponse
    {
        [Newtonsoft.Json.JsonProperty("recipe_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Recipe_id { get; set; }

        [Newtonsoft.Json.JsonProperty("need_fulfilled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Need_fulfilled { get; set; }

        [Newtonsoft.Json.JsonProperty("need_fulfilled_with_shopping_list", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Need_fulfilled_with_shopping_list { get; set; }

        [Newtonsoft.Json.JsonProperty("missing_products_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Missing_products_count { get; set; }

        [Newtonsoft.Json.JsonProperty("costs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Costs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductDetailsResponse
    {
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product Product { get; set; }

        [Newtonsoft.Json.JsonProperty("product_barcodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductBarcode Product_barcodes { get; set; }

        [Newtonsoft.Json.JsonProperty("default_quantity_unit_purchase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantityUnit Default_quantity_unit_purchase { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity_unit_stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuantityUnit Quantity_unit_stock { get; set; }

        [Newtonsoft.Json.JsonProperty("last_purchased", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Last_purchased { get; set; }

        [Newtonsoft.Json.JsonProperty("last_used", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Last_used { get; set; }

        [Newtonsoft.Json.JsonProperty("stock_amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Stock_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("stock_amount_opened", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Stock_amount_opened { get; set; }

        [Newtonsoft.Json.JsonProperty("next_due_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Next_due_date { get; set; }

        /// <summary>
        /// The price of the last purchase of the corresponding product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Last_price { get; set; }

        /// <summary>
        /// The average price af all stock entries currently in stock of the corresponding product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avg_price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Avg_price { get; set; }

        /// <summary>
        /// The current price of the corresponding product, based on the stock entry to use next (defined by the default consume rule "Opened first, then first due first, then first in first out") or on the last price if the product is currently not in stock
        /// </summary>
        [Newtonsoft.Json.JsonProperty("current_price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Current_price { get; set; }

        /// <summary>
        /// This field is deprecated and will be removed in a future version (currently returns the same as `current_price`)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldest_price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public double Oldest_price { get; set; }

        [Newtonsoft.Json.JsonProperty("last_shopping_location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Last_shopping_location_id { get; set; }

        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }

        [Newtonsoft.Json.JsonProperty("average_shelf_life_days", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Average_shelf_life_days { get; set; }

        [Newtonsoft.Json.JsonProperty("spoil_rate_percent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Spoil_rate_percent { get; set; }

        /// <summary>
        /// True when the product is a parent product of others
        /// </summary>
        [Newtonsoft.Json.JsonProperty("has_childs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Has_childs { get; set; }

        [Newtonsoft.Json.JsonProperty("default_location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Default_location { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductPriceHistory
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Date { get; set; }

        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Price { get; set; }

        [Newtonsoft.Json.JsonProperty("shopping_location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShoppingLocation Shopping_location { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductBarcode
    {
        [Newtonsoft.Json.JsonProperty("product_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product_id { get; set; }

        [Newtonsoft.Json.JsonProperty("barcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        [Newtonsoft.Json.JsonProperty("qu_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Qu_id { get; set; }

        [Newtonsoft.Json.JsonProperty("shopping_location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Shopping_location_id { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("last_price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Last_price { get; set; }

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalBarcodeLookupResponse
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        [Newtonsoft.Json.JsonProperty("qu_id_purchase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Qu_id_purchase { get; set; }

        [Newtonsoft.Json.JsonProperty("qu_id_stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Qu_id_stock { get; set; }

        [Newtonsoft.Json.JsonProperty("qu_factor_purchase_to_stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Qu_factor_purchase_to_stock { get; set; }

        /// <summary>
        /// Can contain multiple barcodes separated by comma
        /// </summary>
        [Newtonsoft.Json.JsonProperty("barcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        /// <summary>
        /// The id of the added product, only included when the producted was added to the database
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChoreDetailsResponse
    {
        [Newtonsoft.Json.JsonProperty("chore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Chore Chore { get; set; }

        /// <summary>
        /// When this chore was last tracked
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_tracked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Last_tracked { get; set; }

        /// <summary>
        /// How often this chore was tracked so far
        /// </summary>
        [Newtonsoft.Json.JsonProperty("track_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Track_count { get; set; }

        [Newtonsoft.Json.JsonProperty("last_done_by", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDto Last_done_by { get; set; }

        [Newtonsoft.Json.JsonProperty("next_estimated_execution_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Next_estimated_execution_time { get; set; }

        [Newtonsoft.Json.JsonProperty("next_execution_assigned_user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDto Next_execution_assigned_user { get; set; }

        /// <summary>
        /// Contains the average past execution frequency in hours or `null`, when the chore was never executed before
        /// </summary>
        [Newtonsoft.Json.JsonProperty("average_execution_frequency_hours", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Average_execution_frequency_hours { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatteryDetailsResponse
    {
        [Newtonsoft.Json.JsonProperty("chore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Battery Chore { get; set; }

        /// <summary>
        /// When this battery was last charged
        /// </summary>
        [Newtonsoft.Json.JsonProperty("last_charged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Last_charged { get; set; }

        /// <summary>
        /// How often this battery was charged so far
        /// </summary>
        [Newtonsoft.Json.JsonProperty("charge_cycles_count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Charge_cycles_count { get; set; }

        [Newtonsoft.Json.JsonProperty("next_estimated_charge_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Next_estimated_charge_time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Session
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("session_key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Session_key { get; set; }

        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Expires { get; set; }

        [Newtonsoft.Json.JsonProperty("last_used", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Last_used { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("picture_file_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Picture_file_name { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A user object without the *password* and with an additional *display_name* property
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonProperty("display_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Display_name { get; set; }

        [Newtonsoft.Json.JsonProperty("picture_file_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Picture_file_name { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiKey
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("api_key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_key { get; set; }

        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Expires { get; set; }

        [Newtonsoft.Json.JsonProperty("last_used", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Last_used { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShoppingListItem
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("shopping_list_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Shopping_list_id { get; set; }

        [Newtonsoft.Json.JsonProperty("product_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product_id { get; set; }

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        /// <summary>
        /// The manual entered amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double Amount { get; set; } = 0D;

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        /// <summary>
        /// Key/value pairs of userfields
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userfields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Userfields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Battery
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("used_in", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Used_in { get; set; }

        [Newtonsoft.Json.JsonProperty("charge_interval_days", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Charge_interval_days { get; set; } = 0;

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        /// <summary>
        /// Key/value pairs of userfields
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userfields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Userfields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatteryChargeCycleEntry
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("battery_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Battery_id { get; set; }

        [Newtonsoft.Json.JsonProperty("tracked_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Tracked_time { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Chore
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("period_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChorePeriod_type Period_type { get; set; }

        [Newtonsoft.Json.JsonProperty("period_config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Period_config { get; set; }

        [Newtonsoft.Json.JsonProperty("period_days", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Period_days { get; set; }

        [Newtonsoft.Json.JsonProperty("track_date_only", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Track_date_only { get; set; }

        [Newtonsoft.Json.JsonProperty("rollover", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Rollover { get; set; }

        [Newtonsoft.Json.JsonProperty("assignment_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChoreAssignment_type Assignment_type { get; set; }

        [Newtonsoft.Json.JsonProperty("assignment_config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignment_config { get; set; }

        [Newtonsoft.Json.JsonProperty("next_execution_assigned_to_user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Next_execution_assigned_to_user_id { get; set; }

        [Newtonsoft.Json.JsonProperty("start_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Start_date { get; set; }

        [Newtonsoft.Json.JsonProperty("rescheduled_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Rescheduled_date { get; set; }

        [Newtonsoft.Json.JsonProperty("rescheduled_next_execution_assigned_to_user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rescheduled_next_execution_assigned_to_user_id { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        /// <summary>
        /// Key/value pairs of userfields
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userfields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Userfields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChoreLogEntry
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("chore_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Chore_id { get; set; }

        [Newtonsoft.Json.JsonProperty("tracked_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Tracked_time { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockLogEntry
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("product_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product_id { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("best_before_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Best_before_date { get; set; }

        [Newtonsoft.Json.JsonProperty("purchased_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Purchased_date { get; set; }

        [Newtonsoft.Json.JsonProperty("used_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Used_date { get; set; }

        [Newtonsoft.Json.JsonProperty("spoiled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Spoiled { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("stock_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stock_id { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_id { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StockTransactionType Transaction_type { get; set; }

        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockJournal
    {
        [Newtonsoft.Json.JsonProperty("correlation_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Correlation_id { get; set; }

        [Newtonsoft.Json.JsonProperty("undone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Undone { get; set; }

        [Newtonsoft.Json.JsonProperty("undone_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Undone_timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        [Newtonsoft.Json.JsonProperty("location_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location_name { get; set; }

        [Newtonsoft.Json.JsonProperty("product_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Product_name { get; set; }

        [Newtonsoft.Json.JsonProperty("qu_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Qu_name { get; set; }

        [Newtonsoft.Json.JsonProperty("qu_name_plural", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Qu_name_plural { get; set; }

        [Newtonsoft.Json.JsonProperty("user_display_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_display_name { get; set; }

        [Newtonsoft.Json.JsonProperty("spoiled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Spoiled { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StockTransactionType Transaction_type { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockJournalSummary
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int User_id { get; set; }

        [Newtonsoft.Json.JsonProperty("product_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Product_name { get; set; }

        [Newtonsoft.Json.JsonProperty("product_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product_id { get; set; }

        [Newtonsoft.Json.JsonProperty("qu_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Qu_name { get; set; }

        [Newtonsoft.Json.JsonProperty("qu_name_plural", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Qu_name_plural { get; set; }

        [Newtonsoft.Json.JsonProperty("user_display_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_display_name { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StockTransactionType Transaction_type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error400
    {
        [Newtonsoft.Json.JsonProperty("error_message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error500
    {
        [Newtonsoft.Json.JsonProperty("error_message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_message { get; set; }

        [Newtonsoft.Json.JsonProperty("error_details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error_details Error_details { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentStockResponse
    {
        [Newtonsoft.Json.JsonProperty("product_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product_id { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("amount_aggregated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount_aggregated { get; set; }

        [Newtonsoft.Json.JsonProperty("amount_opened", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount_opened { get; set; }

        [Newtonsoft.Json.JsonProperty("amount_opened_aggregated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount_opened_aggregated { get; set; }

        /// <summary>
        /// The next due date for this product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("best_before_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Best_before_date { get; set; }

        /// <summary>
        /// Indicates wheter this product has sub-products or not / if the fields `amount_aggregated` and `amount_opened_aggregated` are filled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("is_aggregated_amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_aggregated_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Product Product { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentChoreResponse
    {
        [Newtonsoft.Json.JsonProperty("chore_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Chore_id { get; set; }

        [Newtonsoft.Json.JsonProperty("chore_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Chore_name { get; set; }

        [Newtonsoft.Json.JsonProperty("last_tracked_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Last_tracked_time { get; set; }

        [Newtonsoft.Json.JsonProperty("track_date_only", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Track_date_only { get; set; }

        /// <summary>
        /// The next estimated execution time of this chore, 2999-12-31 23:59:59 when the given chore has a period_type of manually
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next_estimated_execution_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Next_estimated_execution_time { get; set; }

        [Newtonsoft.Json.JsonProperty("next_execution_assigned_to_user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Next_execution_assigned_to_user_id { get; set; }

        [Newtonsoft.Json.JsonProperty("is_rescheduled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_rescheduled { get; set; }

        [Newtonsoft.Json.JsonProperty("is_reassigned", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Is_reassigned { get; set; }

        [Newtonsoft.Json.JsonProperty("next_execution_assigned_user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDto Next_execution_assigned_user { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentBatteryResponse
    {
        [Newtonsoft.Json.JsonProperty("battery_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Battery_id { get; set; }

        [Newtonsoft.Json.JsonProperty("last_tracked_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Last_tracked_time { get; set; }

        /// <summary>
        /// The next estimated charge time of this battery, 2999-12-31 23:59:59 when the given battery has no charge_interval_days defined
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next_estimated_charge_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Next_estimated_charge_time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentVolatilStockResponse
    {
        [Newtonsoft.Json.JsonProperty("due_products", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CurrentStockResponse> Due_products { get; set; }

        [Newtonsoft.Json.JsonProperty("overdue_products", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CurrentStockResponse> Overdue_products { get; set; }

        [Newtonsoft.Json.JsonProperty("expired_products", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CurrentStockResponse> Expired_products { get; set; }

        [Newtonsoft.Json.JsonProperty("missing_products", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Missing_products> Missing_products { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Task
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("due_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Due_date { get; set; }

        [Newtonsoft.Json.JsonProperty("done", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Done { get; set; }

        [Newtonsoft.Json.JsonProperty("done_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Done_timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("category_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Category_id { get; set; }

        [Newtonsoft.Json.JsonProperty("assigned_to_user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Assigned_to_user_id { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        /// <summary>
        /// Key/value pairs of userfields
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userfields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Userfields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskCategory
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrentTaskResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("due_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Due_date { get; set; }

        [Newtonsoft.Json.JsonProperty("done", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Done { get; set; }

        [Newtonsoft.Json.JsonProperty("done_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Done_timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("category_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Category_id { get; set; }

        [Newtonsoft.Json.JsonProperty("assigned_to_user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Assigned_to_user_id { get; set; }

        [Newtonsoft.Json.JsonProperty("row_created_timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Row_created_timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("assigned_to_user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDto Assigned_to_user { get; set; }

        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaskCategory Category { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DbChangedTimeResponse
    {
        [Newtonsoft.Json.JsonProperty("changed_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Changed_time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeResponse
    {
        [Newtonsoft.Json.JsonProperty("timezone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        [Newtonsoft.Json.JsonProperty("time_local", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time_local { get; set; }

        [Newtonsoft.Json.JsonProperty("time_local_sqlite3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time_local_sqlite3 { get; set; }

        [Newtonsoft.Json.JsonProperty("time_utc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time_utc { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Offset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSetting
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MissingLocalizationRequest
    {
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExposedEntity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"products")]
        Products = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"chores")]
        Chores = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"product_barcodes")]
        Product_barcodes = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"batteries")]
        Batteries = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"locations")]
        Locations = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"quantity_units")]
        Quantity_units = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"quantity_unit_conversions")]
        Quantity_unit_conversions = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_list")]
        Shopping_list = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_lists")]
        Shopping_lists = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_locations")]
        Shopping_locations = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes")]
        Recipes = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes_pos")]
        Recipes_pos = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes_nestings")]
        Recipes_nestings = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"tasks")]
        Tasks = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"task_categories")]
        Task_categories = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"product_groups")]
        Product_groups = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"equipment")]
        Equipment = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"api_keys")]
        Api_keys = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"userfields")]
        Userfields = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"userentities")]
        Userentities = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"userobjects")]
        Userobjects = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"meal_plan")]
        Meal_plan = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"stock_log")]
        Stock_log = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"stock")]
        Stock = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"stock_current_locations")]
        Stock_current_locations = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"chores_log")]
        Chores_log = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"meal_plan_sections")]
        Meal_plan_sections = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"products_last_purchased")]
        Products_last_purchased = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"products_average_price")]
        Products_average_price = 28,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExposedEntityNoListing
    {

        [System.Runtime.Serialization.EnumMember(Value = @"api_keys")]
        Api_keys = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExposedEntityNoEdit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"stock_log")]
        Stock_log = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"api_keys")]
        Api_keys = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"stock")]
        Stock = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"stock_current_locations")]
        Stock_current_locations = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"chores_log")]
        Chores_log = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"products_last_purchased")]
        Products_last_purchased = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"products_average_price")]
        Products_average_price = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExposedEntityNoDelete
    {

        [System.Runtime.Serialization.EnumMember(Value = @"stock_log")]
        Stock_log = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"stock")]
        Stock = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"stock_current_locations")]
        Stock_current_locations = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"chores_log")]
        Chores_log = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"products_last_purchased")]
        Products_last_purchased = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"products_average_price")]
        Products_average_price = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExposedEntityEditRequiresAdmin
    {

        [System.Runtime.Serialization.EnumMember(Value = @"api_keys")]
        Api_keys = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StockTransactionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"purchase")]
        Purchase = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"consume")]
        Consume = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"inventory-correction")]
        InventoryCorrection = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"product-opened")]
        ProductOpened = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FileGroups
    {

        [System.Runtime.Serialization.EnumMember(Value = @"equipmentmanuals")]
        Equipmentmanuals = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"recipepictures")]
        Recipepictures = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"productpictures")]
        Productpictures = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"userfiles")]
        Userfiles = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"userpictures")]
        Userpictures = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StringEnumTemplate
    {

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExposedEntity_IncludingUserEntities
    {

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"api_keys")]
        Api_keys = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"batteries")]
        Batteries = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"chores")]
        Chores = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"chores_log")]
        Chores_log = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"equipment")]
        Equipment = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"locations")]
        Locations = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"meal_plan")]
        Meal_plan = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"meal_plan_sections")]
        Meal_plan_sections = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"product_barcodes")]
        Product_barcodes = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"product_groups")]
        Product_groups = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"products")]
        Products = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"products_average_price")]
        Products_average_price = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"products_last_purchased")]
        Products_last_purchased = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"quantity_unit_conversions")]
        Quantity_unit_conversions = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"quantity_units")]
        Quantity_units = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes")]
        Recipes = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes_nestings")]
        Recipes_nestings = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes_pos")]
        Recipes_pos = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_list")]
        Shopping_list = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_lists")]
        Shopping_lists = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_locations")]
        Shopping_locations = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"stock")]
        Stock = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"stock_current_locations")]
        Stock_current_locations = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"stock_log")]
        Stock_log = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"task_categories")]
        Task_categories = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"tasks")]
        Tasks = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"userentities")]
        Userentities = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"userfields")]
        Userfields = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"userobjects")]
        Userobjects = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"users")]
        Users = 30,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExposedEntity_NotIncludingNotEditable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"batteries")]
        Batteries = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"chores")]
        Chores = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"equipment")]
        Equipment = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"locations")]
        Locations = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"meal_plan")]
        Meal_plan = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"meal_plan_sections")]
        Meal_plan_sections = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"product_barcodes")]
        Product_barcodes = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"product_groups")]
        Product_groups = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"products")]
        Products = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"quantity_unit_conversions")]
        Quantity_unit_conversions = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"quantity_units")]
        Quantity_units = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes")]
        Recipes = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes_nestings")]
        Recipes_nestings = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes_pos")]
        Recipes_pos = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_list")]
        Shopping_list = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_lists")]
        Shopping_lists = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_locations")]
        Shopping_locations = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"task_categories")]
        Task_categories = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"tasks")]
        Tasks = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"userentities")]
        Userentities = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"userfields")]
        Userfields = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"userobjects")]
        Userobjects = 22,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExposedEntity_NotIncludingNotDeletable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"api_keys")]
        Api_keys = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"batteries")]
        Batteries = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"chores")]
        Chores = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"equipment")]
        Equipment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"locations")]
        Locations = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"meal_plan")]
        Meal_plan = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"meal_plan_sections")]
        Meal_plan_sections = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"product_barcodes")]
        Product_barcodes = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"product_groups")]
        Product_groups = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"products")]
        Products = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"quantity_unit_conversions")]
        Quantity_unit_conversions = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"quantity_units")]
        Quantity_units = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes")]
        Recipes = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes_nestings")]
        Recipes_nestings = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes_pos")]
        Recipes_pos = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_list")]
        Shopping_list = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_lists")]
        Shopping_lists = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_locations")]
        Shopping_locations = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"task_categories")]
        Task_categories = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"tasks")]
        Tasks = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"userentities")]
        Userentities = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"userfields")]
        Userfields = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"userobjects")]
        Userobjects = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExposedEntity_NotIncludingNotListable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"batteries")]
        Batteries = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"chores")]
        Chores = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"chores_log")]
        Chores_log = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"equipment")]
        Equipment = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"locations")]
        Locations = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"meal_plan")]
        Meal_plan = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"meal_plan_sections")]
        Meal_plan_sections = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"product_barcodes")]
        Product_barcodes = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"product_groups")]
        Product_groups = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"products")]
        Products = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"products_average_price")]
        Products_average_price = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"products_last_purchased")]
        Products_last_purchased = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"quantity_unit_conversions")]
        Quantity_unit_conversions = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"quantity_units")]
        Quantity_units = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes")]
        Recipes = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes_nestings")]
        Recipes_nestings = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"recipes_pos")]
        Recipes_pos = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_list")]
        Shopping_list = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_lists")]
        Shopping_lists = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"shopping_locations")]
        Shopping_locations = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"stock")]
        Stock = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"stock_current_locations")]
        Stock_current_locations = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"stock_log")]
        Stock_log = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"task_categories")]
        Task_categories = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"tasks")]
        Tasks = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"userentities")]
        Userentities = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"userfields")]
        Userfields = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"userobjects")]
        Userobjects = 28,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Force_serve_as
    {

        [System.Runtime.Serialization.EnumMember(Value = @"picture")]
        Picture = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {
        /// <summary>
        /// A permission ids
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Permissions_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {
        /// <summary>
        /// A list of permission ids
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Permissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body3
    {
        /// <summary>
        /// The amount to add - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// The due date of the product to add, when omitted, the current date is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("best_before_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Best_before_date { get; set; }

        /// <summary>
        /// The price per stock quantity unit in configured currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Price { get; set; }

        /// <summary>
        /// If the stock entry was already opened or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("open", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Open { get; set; }

        /// <summary>
        /// If omitted, the default location of the product is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        /// <summary>
        /// If omitted, no store will be affected
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shopping_location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Shopping_location_id { get; set; }

        /// <summary>
        /// The date when this stock entry was purchased
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purchased_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Purchased_date { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body4
    {
        /// <summary>
        /// The amount to add - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// The due date of the product to add, when omitted, the current date is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("best_before_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Best_before_date { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StockTransactionType Transaction_type { get; set; }

        /// <summary>
        /// The price per stock quantity unit in configured currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Price { get; set; }

        /// <summary>
        /// If omitted, the default location of the product is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        /// <summary>
        /// If omitted, no store will be affected
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shopping_location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Shopping_location_id { get; set; }

        /// <summary>
        /// `1` = No label, `2` = Single label, `3` = Label per unit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stock_label_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Stock_label_type { get; set; }

        /// <summary>
        /// An optional note for the corresponding stock entry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body5
    {
        /// <summary>
        /// The amount to remove - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StockTransactionType Transaction_type { get; set; }

        /// <summary>
        /// True when the given product was spoiled, defaults to false
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spoiled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Spoiled { get; set; }

        /// <summary>
        /// A specific stock entry id to consume, if used, the amount has to be 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stock_entry_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stock_entry_id { get; set; }

        /// <summary>
        /// A valid recipe id for which this product was used (for statistical purposes only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipe_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Recipe_id { get; set; }

        /// <summary>
        /// A valid location id (if supplied, only stock at the given location is considered, if ommitted, stock of any location is considered)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        /// <summary>
        /// For tare weight handling enabled products, `true` when the given is the absolute amount to be consumed, not the amount including the container weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exact_amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Exact_amount { get; set; }

        /// <summary>
        /// `true` when any in-stock sub product should be used when the given product is a parent product and currently not in-stock
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_subproduct_substitution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_subproduct_substitution { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body6
    {
        /// <summary>
        /// The amount to transfer - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// A valid location id, the location from where the product should be transfered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_id_from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id_from { get; set; }

        /// <summary>
        /// A valid location id, the location to where the product should be transfered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_id_to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id_to { get; set; }

        /// <summary>
        /// A specific stock entry id to transfer, if used, the amount has to be 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stock_entry_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stock_entry_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body7
    {
        /// <summary>
        /// The new current amount for the given product - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("new_amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double New_amount { get; set; }

        /// <summary>
        /// The due date which applies to added products
        /// </summary>
        [Newtonsoft.Json.JsonProperty("best_before_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Best_before_date { get; set; }

        /// <summary>
        /// If omitted, no store will be affected
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shopping_location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Shopping_location_id { get; set; }

        /// <summary>
        /// If omitted, the default location of the product is used (only applies to added products)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        /// <summary>
        /// If omitted, the last price of the product is used (only applies to added products)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Price { get; set; }

        /// <summary>
        /// `1` = No label, `2` = Single label, `3` = Label per unit (only applies to added products)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stock_label_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Stock_label_type { get; set; }

        /// <summary>
        /// An optional note for the corresponding stock entry (only applies to added products)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body8
    {
        /// <summary>
        /// The amount to mark as opened
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// A specific stock entry id to open, if used, the amount has to be 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stock_entry_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stock_entry_id { get; set; }

        /// <summary>
        /// `true` when any in-stock sub product should be used when the given product is a parent product and currently not in-stock
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_subproduct_substitution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_subproduct_substitution { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body9
    {
        /// <summary>
        /// The amount to add - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// The due date of the product to add, when omitted, the current date is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("best_before_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Best_before_date { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StockTransactionType Transaction_type { get; set; }

        /// <summary>
        /// The price per stock quantity unit in configured currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Price { get; set; }

        /// <summary>
        /// If omitted, the default location of the product is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body10
    {
        /// <summary>
        /// The amount to remove - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StockTransactionType Transaction_type { get; set; }

        /// <summary>
        /// True when the given product was spoiled, defaults to false
        /// </summary>
        [Newtonsoft.Json.JsonProperty("spoiled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Spoiled { get; set; }

        /// <summary>
        /// A specific stock entry id to consume, if used, the amount has to be 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stock_entry_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stock_entry_id { get; set; }

        /// <summary>
        /// A valid recipe id for which this product was used (for statistical purposes only)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipe_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Recipe_id { get; set; }

        /// <summary>
        /// A valid location id (if supplied, only stock at the given location is considered, if ommitted, stock of any location is considered)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        /// <summary>
        /// For tare weight handling enabled products, `true` when the given is the absolute amount to be consumed, not the amount including the container weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exact_amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Exact_amount { get; set; }

        /// <summary>
        /// `rue` when any in-stock sub product should be used when the given product is a parent product and currently not in-stock
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_subproduct_substitution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_subproduct_substitution { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body11
    {
        /// <summary>
        /// The amount to transfer - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// A valid location id, the location from where the product should be transfered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_id_from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id_from { get; set; }

        /// <summary>
        /// A valid location id, the location to where the product should be transfered
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_id_to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id_to { get; set; }

        /// <summary>
        /// A specific stock entry id to transfer, if used, the amount has to be 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stock_entry_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stock_entry_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body12
    {
        /// <summary>
        /// The new current amount for the given product - please note that when tare weight handling for the product is enabled, this needs to be the amount including the container weight (gross), the amount to be posted will be automatically calculated based on what is in stock and the defined tare weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("new_amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double New_amount { get; set; }

        /// <summary>
        /// The due date which applies to added products
        /// </summary>
        [Newtonsoft.Json.JsonProperty("best_before_date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Best_before_date { get; set; }

        /// <summary>
        /// If omitted, the default location of the product is used (only applies to added products)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Location_id { get; set; }

        /// <summary>
        /// If omitted, the last price of the product is used (only applies to added products)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Price { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body13
    {
        /// <summary>
        /// The amount to mark as opened
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// A specific stock entry id to open, if used, the amount has to be 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stock_entry_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stock_entry_id { get; set; }

        /// <summary>
        /// `rue` when any in-stock sub product should be used when the given product is a parent product and currently not in-stock
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_subproduct_substitution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_subproduct_substitution { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body14
    {
        /// <summary>
        /// The shopping list to use, when omitted, the default shopping list (with id 1) is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("list_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int List_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body15
    {
        /// <summary>
        /// The shopping list to use, when omitted, the default shopping list (with id 1) is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("list_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int List_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body16
    {
        /// <summary>
        /// The shopping list to use, when omitted, the default shopping list (with id 1) is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("list_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int List_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body17
    {
        /// <summary>
        /// The shopping list id to clear, when omitted, the default shopping list (with id 1) is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("list_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int List_id { get; set; }

        /// <summary>
        /// When `true`, only done items will be removed (defaults to `false` when ommited)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("done_only", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Done_only { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body18
    {
        /// <summary>
        /// A valid product id of the product to be added
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product_id { get; set; }

        /// <summary>
        /// A valid quantity unit id (used only for display; the amount needs to be related to the products stock QU), when omitted, the products stock QU is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qu_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Qu_id { get; set; }

        /// <summary>
        /// A valid shopping list id, when omitted, the default shopping list (with id 1) is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("list_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int List_id { get; set; }

        /// <summary>
        /// The amount (related to the products stock QU) to add, when omitted, the default amount of 1 is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product_amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Product_amount { get; set; }

        /// <summary>
        /// The note of the shopping list item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("note", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body19
    {
        /// <summary>
        /// A valid product id of the item on the shopping list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product_id { get; set; }

        /// <summary>
        /// A valid shopping list id, when omitted, the default shopping list (with id 1) is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("list_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int List_id { get; set; }

        /// <summary>
        /// The amount of product units to remove, when omitted, the default amount of 1 is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product_amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Product_amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body20
    {
        /// <summary>
        /// An optional array of product ids to exclude them from being put on the shopping list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludedProductIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> ExcludedProductIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body21
    {
        /// <summary>
        /// The time of when the chore was executed, when omitted, the current time is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tracked_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Tracked_time { get; set; }

        /// <summary>
        /// A valid user id of who executed this chore, when omitted, the currently authenticated user will be used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("done_by", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Done_by { get; set; }

        /// <summary>
        /// `true` when the execution should be tracked as skipped, defaults to `false` when omitted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skipped", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Skipped { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body22
    {
        /// <summary>
        /// The chore id of the chore which next user assignment should be (re)calculated, when omitted, the next user assignments of all chores will (re)caluclated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chore_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Chore_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body23
    {
        /// <summary>
        /// The time of when the battery was charged, when omitted, the current time is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tracked_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Tracked_time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body24
    {
        /// <summary>
        /// The time of when the task was completed, when omitted, the current time is used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("done_time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Done_time { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("grocy_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Grocy_version Grocy_version { get; set; }

        [Newtonsoft.Json.JsonProperty("php_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Php_version { get; set; }

        [Newtonsoft.Json.JsonProperty("sqlite_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sqlite_version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {
        /// <summary>
        /// The id of the created object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_object_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Created_object_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        [Newtonsoft.Json.JsonProperty("permission_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Permission_id { get; set; }

        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int User_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3
    {
        /// <summary>
        /// The id of the created recipe
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_object_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Created_object_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response4
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response5
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Result { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChorePeriod_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"manually")]
        Manually = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hourly")]
        Hourly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"daily")]
        Daily = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"weekly")]
        Weekly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"monthly")]
        Monthly = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChoreAssignment_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"no-assignment")]
        NoAssignment = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"who-least-did-first")]
        WhoLeastDidFirst = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"in-alphabetical-order")]
        InAlphabeticalOrder = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error_details
    {
        [Newtonsoft.Json.JsonProperty("stack_trace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stack_trace { get; set; }

        [Newtonsoft.Json.JsonProperty("file", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string File { get; set; }

        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Line { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Missing_products
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("amount_missing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount_missing { get; set; }

        [Newtonsoft.Json.JsonProperty("is_partly_in_stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Is_partly_in_stock { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Grocy_version
    {
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("ReleaseDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ReleaseDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603