@using MyFoodLog.Models
@using System.Dynamic
@using MyFoodLog.Web.API.Client.Interfaces
@using MyFoodLog.Web.State
@using Newtonsoft.Json
@using AddConsumptionRequestDto = MyFoodLog.Web.API.Client.Interfaces.AddConsumptionRequestDto
@using MealTypeDto = MyFoodLog.Web.API.Client.Interfaces.MealTypeDto
@namespace MyFoodLog.Web.Components

<EditForm Model="@AddConsumptionRequestDto">
    <div class="mdc-layout-grid__inner">
        <div class="mdc-layout-grid__cell--span-12-desktop mdc-layout-grid__cell--span-8-tablet mdc-layout-grid__cell--span-4-phone">
            <MBTextField @bind-Value="@AddConsumptionRequestDto.Name"
                         Label="Product Name"
                         TextInputStyle="MBTextInputStyle.Outlined"
                         Disabled="@NameWasProvided"
                         style="width: 100%; margin-top: 1em"/>
        </div>

        <div class="mdc-layout-grid__cell--span-12-desktop mdc-layout-grid__cell--span-8-tablet mdc-layout-grid__cell--span-4-phone">
            <MBNumericDecimalField @bind-Value="@AddConsumptionRequestDto.Amount"
                                   DecimalPlaces="2"
                                   Label="Amount"
                                   HelperText=""
                                   TextInputStyle="MBTextInputStyle.Outlined"
                                   style="width: 100%"/>
        </div>

        <!--
        TODO:
        - Put the unit of the amount in the HelperText
        - Submit the ConsumptionDto to the backend
        -->

        <div class="mdc-layout-grid__cell--span-12-desktop mdc-layout-grid__cell--span-8-tablet mdc-layout-grid__cell--span-4-phone">
            <MBSelect @bind-Value="@AddConsumptionRequestDto.MealTypeId"
                      Items="@Meals"
                      ItemValidation="MBItemValidation.NoSelection"
                      Label="Meal"
                      style="width: 100%"/>
        </div>

        <div class="mdc-layout-grid__cell--span-10-desktop mdc-layout-grid__cell--span-7-tablet mdc-layout-grid__cell--span-3-phone"></div>
        <div class="mdc-layout-grid__cell--span-2-desktop mdc-layout-grid__cell--span-1-tablet mdc-layout-grid__cell--span-1-phone" style="text-align: left;">
            <MBButton Label="Add"
                      style="margin: 0.75em 0.25em 0.25em 0.25em;"
                      type="submit"
                      @onclick="@(async () => await SubmitConsumption())"/>
        </div>
    </div>
</EditForm>

@code{

    [Inject]
    private StateContainer? StateContainer { get; set; }

    [Inject]
    private IMBToastService? ToastService { get; set; }
    
    [Inject]
    private IMyFoodLogApi? FoodLogApi { get; set; }

    public bool NameWasProvided { get; set; }

    public AddConsumptionRequestDto AddConsumptionRequestDto { get; set; } = new();

    public List<MBSelectElement<Guid?>> Meals { get; set; } = new ();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (FoodLogApi != null)
            {
                ICollection<MealTypeDto> mealTypes = await FoodLogApi.Meal_GetMealTypesAsync(CancellationToken.None) ?? new List<MealTypeDto>();

                Meals.Clear();

                foreach (MealTypeDto mealType in mealTypes)
                {
                    Meals.Add(new MBSelectElement<Guid?>() { SelectedValue = mealType.Id, Label = mealType.Name });
                }
            }
        }
        catch (ApiException)
        {
            
        }

        await base.OnInitializedAsync();
    }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        try
        {
            if (StateContainer != null)
            {
                Console.WriteLine("stateContainer was not empty");
                if (StateContainer.SelectedFoodItem != null && !string.IsNullOrEmpty(StateContainer.SelectedFoodItem.Name))
                {
                    Console.WriteLine("SelectedFoodItem was not empty, and has a name");
                    AddConsumptionRequestDto.Name = StateContainer.SelectedFoodItem.Name;
                    NameWasProvided = true;
                }
            }
        }
        catch (Exception)
        {
            Console.WriteLine("This somehow works but also throws an exception.");
        }
    }

    private async Task SubmitConsumption(CancellationToken ctx = default)
    {
        try
        {
            if (FoodLogApi != null)
            {
                await FoodLogApi.FoodConsumption_CreateAsync(AddConsumptionRequestDto, ctx);
                ToastService?.ShowToast(MBToastLevel.Success, $"Successfully added {AddConsumptionRequestDto.Amount} {StateContainer?.SelectedFoodItem?.QuantityUnit ?? string.Empty} of {AddConsumptionRequestDto.Name} to {Meals.First(m => m.SelectedValue == AddConsumptionRequestDto.MealTypeId).Label}.", timeout: 1500);
                StateHasChanged();
            }
        }
        catch (ApiException)
        {
            
        }
    }

}