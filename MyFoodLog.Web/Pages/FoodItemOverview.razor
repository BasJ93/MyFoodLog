@page "/FoodItemOverview"
@using MyFoodLog.Web.State
@using MyFoodLog.Web.API.Client.Interfaces
@using MyFoodLog.Web.Components

@code {

    [Inject]
    private IMBToastService? ToastService { get; set; }

    [Inject]
    private StateContainer? _stateContainer { get; set; }

    [Inject]
    private IMyFoodLogApi? FoodLogApi { get; set; }

    private MBDialog EditFoodItemDialog { get; set; } = new();
    
    private MBDialog CreateFoodItemDialog { get; set; } = new();

    private List<FoodItemDto>? FoodItems { get; set; } = new();

    private async Task ShowEditDialog(Guid id)
    {
        if (_stateContainer != null)
        {
            _stateContainer.SelectedFoodItem = FoodItems?.Find(f => f.Id == id);
        }

        await EditFoodItemDialog.ShowAsync();
    }
    
    private async Task ShowAddDialog()
    {
        if (_stateContainer != null)
        {
            _stateContainer.SelectedFoodItem = new();
        }

        await EditFoodItemDialog.ShowAsync();
    }

    private async Task<bool> EditFoodItem(IMyFoodLogApi foodLogApi, IMBToastService toastService, CreateFoodItemDto createDto, CancellationToken ctx)
    {
        if (_stateContainer?.SelectedFoodItem != null)
        {
            try
            {
                await foodLogApi.FoodItem_UpdateFoodItemAsync(_stateContainer.SelectedFoodItem.Id, "1", createDto, ctx);

                toastService.ShowToast(MBToastLevel.Success, $"Successfully updated {createDto.Name}.", timeout: 1500);
                
                await EditFoodItemDialog.HideAsync();
                
                await UpdateFoodItems(ctx);
                
                StateHasChanged();

                return true;
            }
            catch (ApiException)
            {
            }
        }

        return false;
    }

    private async Task<bool> CreateFoodItem(IMyFoodLogApi foodLogApi, IMBToastService toastService, CreateFoodItemDto createDto, CancellationToken ctx)
    {
        try
        {
            await foodLogApi.FoodItem_CreateFoodItemAsync("1", createDto, ctx);

            toastService.ShowToast(MBToastLevel.Success, $"Successfully added {createDto.Name}.", timeout: 1500);

            await CreateFoodItemDialog.HideAsync();

            await UpdateFoodItems(ctx);
            
            StateHasChanged();

            return true;
        }
        catch (ApiException)
        {
        }

        return false;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await UpdateFoodItems(CancellationToken.None);

        await base.OnInitializedAsync();
    }

    private async Task UpdateFoodItems(CancellationToken ctx = default)
    {
        if (FoodLogApi != null)
        {
            FoodItems = (await FoodLogApi.FoodItem_GetAllAsync("1", ctx)).ToList();
        }
    }

}

<div class="mdc-layout-grid__cell--span-3-desktop"></div>
<div class="mdc-layout-grid__cell--span-6-desktop mdc-layout-grid__cell--span-8-tablet mdc-layout-grid__cell--span-4-phone">

    <div class="mdc-layout-grid__inner">

        <div class="mdc-layout-grid__cell--span-10-desktop mdc-layout-grid__cell--span-7-tablet mdc-layout-grid__cell--span-3-phone">
            <h3 class="mdc-typography--headline5">FoodItem Overview</h3>
        </div>
        <div class="mdc-layout-grid__cell--span-2-desktop mdc-layout-grid__cell--span-1-tablet mdc-layout-grid__cell--span-1-phone" style="text-align: center;">
            <MBIconButton Icon="add" @onclick="@(async () => await ShowAddDialog())" style="margin: 18px 0;"/>
        </div>

        <div class="mdc-layout-grid__cell--span-12-desktop mdc-layout-grid__cell--span-8-tablet mdc-layout-grid__cell--span-4-phone">
            <MBList Items="@FoodItems"
                    Context="foodItem"
                    ListStyle="MBListStyle.Outlined"
                    ListType="MBListType.Regular"
                    KeyboardInteractions="true">

                <Title>@foodItem.Name</Title>
                <LineTwo>Energy: @foodItem.Energy.ToString("0.####") kcal/@foodItem.QuantityUnit</LineTwo>

                <SecondaryActions>
                    <MBIconButton Icon="edit" @onclick="@(async () => await ShowEditDialog(foodItem.Id))"/>
                </SecondaryActions>
            </MBList>
        </div>
    </div>
</div>

<MBDialog @ref="CreateFoodItemDialog"
          Title="Add new item">
    <Body>
    <AddFoodItemComponent FormHandler="CreateFoodItem"/>
    </Body>
</MBDialog>

<MBDialog @ref="EditFoodItemDialog"
          Title="Edit item">
    <Body>
    <AddFoodItemComponent FormHandler="EditFoodItem"/>
    </Body>
</MBDialog>